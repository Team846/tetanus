#!/usr/bin/env python3

"""Download static libraries and headers for wpilib + vendor depndencies.

Compiled libraries and headers are downloaded from each vendor's maven repository linked in
vendordeps JSON files.
"""

from datetime import datetime
from glob import glob
import json
import os
import shutil
import urllib.request

VENDORDEPS_DIR = "vendordeps"
INCLUDE_DIR = "include"
LIB_DIR = "lib"

WPILIB_DEP = f"{VENDORDEPS_DIR}/wpilib.json"


def main():
    # Downlaod all wpilib deps
    with open(WPILIB_DEP, 'r') as wpilib_dep_file:
        j = json.load(wpilib_dep_file)
        for dep in j['dependencies']:
            install_dep(
                'wpilib',
                j['mavenUrl'],
                f"edu.wpi.first.{dep}",
                f"{dep}-cpp",
                j['version']
            )

    # Download all vendor deps
    for vendordep_path in glob(f"{VENDORDEPS_DIR}/*.json"):
        # Skip wpilib
        if vendordep_path == WPILIB_DEP:
            continue

        with open(vendordep_path, 'r') as vendordep_file:
            j = json.load(vendordep_file)

            for dep in j['cppDependencies']:
                # Skip dependencies that arent compiled for roborio (probably simulation stuff)
                if 'linuxathena' not in dep['binaryPlatforms']:
                    print(f"Skipping {dep['groupId']}-{dep['artifactId']}")
                    continue

                install_dep(
                    j['name'],
                    j['mavenUrls'][0],
                    dep['groupId'],
                    dep['artifactId'],
                    dep['version']
                )
    
    # create autogenerated READMEs with timestamps
    for dir in [INCLUDE_DIR, LIB_DIR]:
        with open(f"{dir}/README.txt", "w") as f:
            f.write(f"Files downloaded by ../install_deps.py on {datetime.now()}")


def install_dep(vendor_name, maven_url, group_id, artifact_id, version):
    """Download a dependency headers and static library."""

    url = f"{maven_url}{group_id.replace('.', '/')}/{artifact_id}/{version}"
    name = f"{artifact_id}-{version}"

    download_and_unzip(f"{url}/{name}-headers.zip", INCLUDE_DIR, name)
    download_and_unzip(f"{url}/{name}-linuxathenastatic.zip", LIB_DIR, name)


def download_and_unzip(url, dir, name):
    """Download a specificed zip file and unzip it."""

    full_path = f"{dir}/{name}.zip"

    print(f"Downloading {full_path}")
    urllib.request.urlretrieve(url, full_path)

    shutil.unpack_archive(full_path, dir)
    os.remove(full_path)


if __name__ == "__main__":
    main()
